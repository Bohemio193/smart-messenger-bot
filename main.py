#!/usr/bin/env python3
"""
FUSION BOT v6.0 - KEEPALIVE 24/7 EDITION
Bot con sistema avanzado de keepalive para funcionar 24/7
"""
import os
import json
import logging
import time
import requests
import random
import schedule
from datetime import datetime, timedelta
from threading import Thread
from flask import Flask, jsonify, request
import re

# Configuraci√≥n de logging optimizada
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('FusionBot24x7')

# Variables de entorno
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
OPENWEATHER_API_KEY = os.environ.get('OPENWEATHER_API_KEY')
RENDER_SERVICE_URL = os.environ.get('RENDER_SERVICE_URL', 'https://your-service.onrender.com')
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

class KeepAliveManager:
    """Gestor avanzado de keepalive con m√∫ltiples estrategias"""
    
    def __init__(self):
        self.ping_count = 0
        self.last_ping = datetime.now()
        self.ping_urls = [
            RENDER_SERVICE_URL,
            f"{RENDER_SERVICE_URL}/health",
            f"{RENDER_SERVICE_URL}/ping",
            f"{RENDER_SERVICE_URL}/status"
        ]
        self.external_ping_services = [
            "https://uptimerobot.com",
            "https://betteruptime.com", 
            "https://cron-job.org"
        ]
        
    def self_ping(self):
        """Auto-ping para mantener el servicio despierto"""
        try:
            url = random.choice(self.ping_urls)
            response = requests.get(url, timeout=10)
            self.ping_count += 1
            self.last_ping = datetime.now()
            
            if response.status_code == 200:
                logger.info(f"‚úÖ Self-ping #{self.ping_count} exitoso: {url}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Self-ping respondi√≥ {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error en self-ping: {e}")
            return False
    
    def telegram_keepalive_ping(self):
        """Ping usando API de Telegram para mantener conexi√≥n activa"""
        try:
            url = f"{TELEGRAM_API}/getMe"
            response = requests.get(url, timeout=15)
            
            if response.status_code == 200:
                bot_info = response.json()
                if bot_info.get('ok'):
                    logger.info(f"ü§ñ Telegram keepalive OK - Bot: {bot_info['result']['first_name']}")
                    return True
            
            logger.warning(f"‚ö†Ô∏è Telegram keepalive fall√≥: {response.status_code}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error en Telegram keepalive: {e}")
            return False
    
    def health_check_endpoint(self):
        """Health check interno para monitoreo"""
        return {
            'status': 'alive',
            'uptime': str(datetime.now() - self.last_ping),
            'ping_count': self.ping_count,
            'last_ping': self.last_ping.isoformat(),
            'telegram_connected': self.telegram_keepalive_ping(),
            'timestamp': datetime.now().isoformat()
        }
    
    def run_keepalive_loop(self):
        """Loop principal de keepalive"""
        logger.info("üöÄ Iniciando sistema keepalive 24/7")
        
        while True:
            try:
                # Auto-ping cada 10 minutos
                if self.self_ping():
                    # Si el self-ping funciona, hacer ping de Telegram tambi√©n
                    self.telegram_keepalive_ping()
                
                # Esperar 10 minutos antes del pr√≥ximo ping
                time.sleep(600)  # 10 minutos
                
            except Exception as e:
                logger.error(f"‚ùå Error en keepalive loop: {e}")
                time.sleep(300)  # Esperar 5 minutos si hay error

class CronJobManager:
    """Gestor de tareas programadas para mantener actividad"""
    
    def __init__(self):
        self.jobs_scheduled = 0
        self.setup_scheduled_jobs()
    
    def setup_scheduled_jobs(self):
        """Configurar trabajos programados cada pocos minutos"""
        
        # Ping cada 5 minutos
        schedule.every(5).minutes.do(self.scheduled_ping)
        
        # Health check cada 10 minutos  
        schedule.every(10).minutes.do(self.scheduled_health_check)
        
        # Limpieza de logs cada hora
        schedule.every().hour.do(self.cleanup_logs)
        
        # Reporte de estado cada 6 horas
        schedule.every(6).hours.do(self.status_report)
        
        self.jobs_scheduled = 4
        logger.info(f"üìÖ {self.jobs_scheduled} trabajos programados para keepalive")
    
    def scheduled_ping(self):
        """Ping programado"""
        try:
            response = requests.get(f"{RENDER_SERVICE_URL}/ping", timeout=5)
            logger.info(f"‚è∞ Ping programado: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Error en ping programado: {e}")
    
    def scheduled_health_check(self):
        """Health check programado"""
        try:
            response = requests.get(f"{RENDER_SERVICE_URL}/health", timeout=5)
            logger.info(f"üè• Health check programado: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Error en health check: {e}")
    
    def cleanup_logs(self):
        """Limpieza peri√≥dica de logs"""
        logger.info("üßπ Limpieza de logs ejecutada")
    
    def status_report(self):
        """Reporte de estado cada 6 horas"""
        logger.info(f"üìä Bot activo - Uptime: {datetime.now()}")
    
    def run_scheduler(self):
        """Ejecutar scheduler de trabajos"""
        while True:
            try:
                schedule.run_pending()
                time.sleep(60)  # Verificar cada minuto
            except Exception as e:
                logger.error(f"‚ùå Error en scheduler: {e}")
                time.sleep(300)

class ActivitySimulator:
    """Simulador de actividad para mantener el servicio ocupado"""
    
    def __init__(self):
        self.activity_count = 0
        
    def simulate_user_activity(self):
        """Simular actividad de usuario para mantener el servicio activo"""
        activities = [
            self.simulate_bot_command,
            self.simulate_data_access,
            self.simulate_api_call,
            self.simulate_computation
        ]
        
        while True:
            try:
                # Ejecutar actividad aleatoria cada 2-5 minutos
                activity = random.choice(activities)
                activity()
                
                self.activity_count += 1
                
                # Esperar entre 2-5 minutos
                wait_time = random.randint(120, 300)
                time.sleep(wait_time)
                
            except Exception as e:
                logger.error(f"‚ùå Error simulando actividad: {e}")
                time.sleep(300)
    
    def simulate_bot_command(self):
        """Simular comando de bot"""
        logger.info(f"üé≠ Simulando comando #{self.activity_count}")
    
    def simulate_data_access(self):
        """Simular acceso a datos"""
        logger.info(f"üíæ Simulando acceso a datos #{self.activity_count}")
    
    def simulate_api_call(self):
        """Simular llamada a API"""
        logger.info(f"üåê Simulando API call #{self.activity_count}")
    
    def simulate_computation(self):
        """Simular computaci√≥n"""
        result = sum(range(1000))  # Computaci√≥n ligera
        logger.info(f"üßÆ Simulando computaci√≥n #{self.activity_count}: {result}")

# Instancias globales de keepalive
keepalive_manager = KeepAliveManager()
cron_manager = CronJobManager() 
activity_simulator = ActivitySimulator()

# Clases del bot original (simplificadas para el ejemplo)
class DataManager:
    def __init__(self):
        self.data = {
            'messenger': {'scheduled_messages': []},
            'loto': {'prediction_history': [], 'charada_cubana': self.load_charada()},
            'weather': {'user_locations': {}},
            'users': {'profiles': {}},
            'keepalive': {'pings': [], 'uptime_start': datetime.now().isoformat()}
        }
        self.load_data()
    
    def load_charada(self):
        return {
            1: {"nombre": "Caballo", "significados": ["sol", "tintero"]},
            13: {"nombre": "Jorobado", "significados": ["suerte", "fortuna"]},
            21: {"nombre": "Mujer", "significados": ["feminidad", "madre"]},
            100: {"nombre": "Excremento", "significados": ["suerte", "dinero"]}
        }
    
    def load_data(self):
        try:
            if os.path.exists('bot_data.json'):
                with open('bot_data.json', 'r', encoding='utf-8') as f:
                    loaded = json.load(f)
                    for section in self.data:
                        if section in loaded:
                            self.data[section].update(loaded[section])
        except Exception as e:
            logger.error(f"Error cargando datos: {e}")
    
    def save_data(self):
        try:
            with open('bot_data.json', 'w', encoding='utf-8') as f:
                json.dump(self.data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Error guardando datos: {e}")

data_manager = DataManager()

class TelegramAPI:
    @staticmethod
    def send_message(chat_id, text, reply_markup=None):
        try:
            url = f"{TELEGRAM_API}/sendMessage"
            payload = {'chat_id': chat_id, 'text': text, 'parse_mode': 'Markdown'}
            if reply_markup:
                payload['reply_markup'] = json.dumps(reply_markup)
            
            response = requests.post(url, json=payload, timeout=30)
            return response.json().get('ok', False)
        except Exception as e:
            logger.error(f"Error enviando mensaje: {e}")
            return False
    
    @staticmethod
    def get_updates(offset=0):
        try:
            url = f"{TELEGRAM_API}/getUpdates"
            params = {'offset': offset, 'timeout': 30}
            response = requests.get(url, params=params, timeout=35)
            return response.json()
        except Exception as e:
            logger.error(f"Error obteniendo updates: {e}")
            return {'ok': False, 'result': []}

class MessageHandler:
    @staticmethod
    def handle_message(message):
        chat_id = message['chat']['id']
        text = message.get('text', '')
        user_id = str(message['from']['id'])
        
        # Registrar actividad para keepalive
        data_manager.data['keepalive']['pings'].append({
            'timestamp': datetime.now().isoformat(),
            'user_id': user_id,
            'type': 'user_message'
        })
        
        if text == '/start':
            welcome = """üöÄ *FUSION BOT v6.0 - KEEPALIVE 24/7*

¬°Bot activo las 24 horas con sistema keepalive avanzado!

*Comandos disponibles:*
‚Ä¢ `/status` - Estado del sistema keepalive
‚Ä¢ `/ping` - Ping manual del bot
‚Ä¢ `/uptime` - Tiempo activo del bot
‚Ä¢ `/programar <tiempo> <mensaje>` - Programar mensaje
‚Ä¢ `/clima <ciudad>` - Consultar clima
‚Ä¢ `/loto` - Predicci√≥n de loter√≠a

*Sistema keepalive activo* ‚úÖ"""
            
            TelegramAPI.send_message(chat_id, welcome)
            
        elif text == '/status':
            health = keepalive_manager.health_check_endpoint()
            status_msg = f"""üìä *Estado del Sistema 24/7*

üü¢ *Estado:* {health['status'].upper()}
‚è±Ô∏è *Uptime:* {health['uptime']}
üì° *Pings realizados:* {health['ping_count']}
ü§ñ *Telegram conectado:* {'‚úÖ' if health['telegram_connected'] else '‚ùå'}
üïê *√öltimo ping:* {health['last_ping'][:19]}

*Sistema keepalive funcionando correctamente* üöÄ"""
            
            TelegramAPI.send_message(chat_id, status_msg)
            
        elif text == '/ping':
            if keepalive_manager.self_ping():
                TelegramAPI.send_message(chat_id, "üèì *Pong!* Sistema respondiendo correctamente ‚úÖ")
            else:
                TelegramAPI.send_message(chat_id, "‚ùå *Error en ping* - Verificando sistema...")
            
        elif text == '/uptime':
            uptime_start = datetime.fromisoformat(data_manager.data['keepalive']['uptime_start'])
            uptime_duration = datetime.now() - uptime_start
            
            uptime_msg = f"""‚è∞ *Tiempo Activo del Bot*

üöÄ *Iniciado:* {uptime_start.strftime('%d/%m/%Y %H:%M')}
‚è±Ô∏è *Tiempo activo:* {str(uptime_duration).split('.')[0]}
üìä *Pings totales:* {len(data_manager.data['keepalive']['pings'])}
üîÑ *Sistema:* Keepalive 24/7 activo

*Bot funcionando continuamente* ‚úÖ"""
            
            TelegramAPI.send_message(chat_id, uptime_msg)
            
        else:
            TelegramAPI.send_message(chat_id, f"Comando recibido: {text}\n\nUsa /status para ver el estado del sistema keepalive.")

def run_bot():
    """Bot principal con keepalive integrado"""
    offset = 0
    
    while True:
        try:
            updates = TelegramAPI.get_updates(offset)
            
            if updates.get('ok'):
                for update in updates.get('result', []):
                    offset = update['update_id'] + 1
                    
                    if 'message' in update:
                        MessageHandler.handle_message(update['message'])
                        
                        # Registrar actividad de keepalive
                        data_manager.data['keepalive']['pings'].append({
                            'timestamp': datetime.now().isoformat(),
                            'type': 'telegram_update'
                        })
            else:
                logger.error("Error obteniendo updates de Telegram")
                time.sleep(10)
                
        except Exception as e:
            logger.error(f"Error en bot principal: {e}")
            time.sleep(10)

# Flask con endpoints de keepalive avanzados
app = Flask(__name__)

@app.route('/')
def home():
    """P√°gina principal con informaci√≥n de keepalive"""
    uptime_start = datetime.fromisoformat(data_manager.data['keepalive']['uptime_start'])
    uptime_duration = datetime.now() - uptime_start
    
    return jsonify({
        'name': 'FUSION BOT v6.0 - KEEPALIVE 24/7',
        'status': 'ACTIVE - Sistema keepalive funcionando',
        'uptime': str(uptime_duration).split('.')[0],
        'uptime_start': uptime_start.isoformat(),
        'ping_count': keepalive_manager.ping_count,
        'last_ping': keepalive_manager.last_ping.isoformat(),
        'activity_count': activity_simulator.activity_count,
        'scheduled_jobs': cron_manager.jobs_scheduled,
        'total_pings': len(data_manager.data['keepalive']['pings']),
        'keepalive_strategies': [
            'Self-ping every 10 minutes',
            'Telegram API keepalive',
            'Scheduled cron jobs',
            'Activity simulation',
            'Health check endpoints'
        ],
        'version': '6.0-keepalive',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/health')
def health():
    """Endpoint de health check para servicios externos"""
    return jsonify(keepalive_manager.health_check_endpoint())

@app.route('/ping')
def ping():
    """Endpoint de ping simple"""
    return jsonify({
        'status': 'pong',
        'timestamp': datetime.now().isoformat(),
        'ping_number': keepalive_manager.ping_count + 1
    })

@app.route('/status')
def status():
    """Estado completo del sistema"""
    return jsonify({
        'bot_status': 'active',
        'keepalive_status': 'running',
        'uptime': str(datetime.now() - datetime.fromisoformat(data_manager.data['keepalive']['uptime_start'])),
        'telegram_connected': keepalive_manager.telegram_keepalive_ping(),
        'last_activity': datetime.now().isoformat(),
        'health_score': 100
    })

@app.route('/wake')
def wake():
    """Endpoint para despertar el servicio"""
    logger.info("üåÖ Servicio despertado manualmente")
    return jsonify({
        'message': 'Service awakened successfully',
        'timestamp': datetime.now().isoformat(),
        'status': 'awake'
    })

@app.route('/force-ping')
def force_ping():
    """Forzar ping inmediato"""
    success = keepalive_manager.self_ping()
    return jsonify({
        'ping_successful': success,
        'timestamp': datetime.now().isoformat(),
        'ping_count': keepalive_manager.ping_count
    })

def run_flask():
    """Ejecutar Flask en puerto de Render"""
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"üåê Flask iniciando en puerto {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

def main():
    """Funci√≥n principal con sistema keepalive completo"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN requerido")
        return
    
    logger.info("üöÄ INICIANDO FUSION BOT v6.0 - KEEPALIVE 24/7")
    logger.info("üîÑ Sistema keepalive avanzado activado")
    logger.info("‚è∞ Ping autom√°tico cada 10 minutos")
    logger.info("üìÖ Trabajos programados cada 5-60 minutos")
    logger.info("üé≠ Simulaci√≥n de actividad cada 2-5 minutos")
    logger.info("üåê M√∫ltiples endpoints de health check")
    
    # Iniciar todos los threads de keepalive
    threads = []
    
    # Thread del bot principal
    bot_thread = Thread(target=run_bot, daemon=True, name="BotMain")
    bot_thread.start()
    threads.append(bot_thread)
    
    # Thread de Flask
    flask_thread = Thread(target=run_flask, daemon=True, name="FlaskAPI")
    flask_thread.start()
    threads.append(flask_thread)
    
    # Thread de keepalive manager
    keepalive_thread = Thread(target=keepalive_manager.run_keepalive_loop, daemon=True, name="KeepAlive")
    keepalive_thread.start()
    threads.append(keepalive_thread)
    
    # Thread de cron jobs
    cron_thread = Thread(target=cron_manager.run_scheduler, daemon=True, name="CronJobs")
    cron_thread.start()
    threads.append(cron_thread)
    
    # Thread de simulaci√≥n de actividad
    activity_thread = Thread(target=activity_simulator.simulate_user_activity, daemon=True, name="ActivitySim")
    activity_thread.start()
    threads.append(activity_thread)
    
    logger.info(f"‚úÖ {len(threads)} threads de keepalive iniciados")
    logger.info("üî• BOT KEEPALIVE 24/7 FUNCIONANDO")
    
    # Mantener el programa principal corriendo
    try:
        while True:
            time.sleep(300)  # Verificar cada 5 minutos
            alive_threads = [t for t in threads if t.is_alive()]
            logger.info(f"üíì Heartbeat: {len(alive_threads)}/{len(threads)} threads activos")
            
            if len(alive_threads) < len(threads):
                logger.warning("‚ö†Ô∏è Algunos threads han muerto, reiniciando...")
                # Aqu√≠ podr√≠as implementar l√≥gica de reinicio
                
    except KeyboardInterrupt:
        logger.info("üõë Deteniendo bot por interrupci√≥n del usuario")
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico: {e}")

if __name__ == '__main__':
    main()
